
@model Infraestructure.Models.Producto

@{
    ViewBag.Title = "Details";
}

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*@{
        string currentUser = HttpContext.Current.User.Identity.Name;
        bool isCurrentUserSender = // Lógica para determinar si el usuario actual es el emisor del mensaje
    }*@


<div>
    <div class="content">
        <div class="row g-3">
            <div class="col">
                <div class=" mb-3" style="max-width: auto;">
                    <div class="row g-0 d-flex align-items-start">
                        <div class="col-md-6 d-flex justify-content-center align-items-center">
                            <img src="data:image/jpeg;charset=utf-8;base64,@Convert.ToBase64String(Model.Imagen)"
                                 alt="Libro @Html.DisplayFor(model => model.Nombre)"
                                 class="img-fluid rounded-start imagen-detalle " />

                        </div>




                        <div class="col-md-6">


                            <div class="details">
                                <p class="card-text">
                                    <span class="card-title text-black">@Html.DisplayFor(model => model.Nombre)</span>
                                </p>
                                <p class="card-text">
                                    <i class="fa-solid fa-box detail-descrip">  @Html.DisplayFor(model => model.Descripcion)</i>
                                </p>

                                <p class="card-text">
                                    <i class="fa-solid fa-box"> </i> <b>@Html.DisplayNameFor(model => model.Estado):</b>  @Html.DisplayFor(model => model.Estado)
                                </p>
                                <p class="card-text">
                                    <i class="fa-solid fa-box">SKU: </i> <i class="">@Html.DisplayFor(model => model.Id)</i>
                                </p>

                                @*<p class="card-text">
                                        <i class="fa-solid fa-circle-user"></i> <b>@Html.DisplayNameFor(model => model.Tienda):</b>    @Html.DisplayFor(model => model.Tienda.NombreProveedor)
                                    </p>*@
                                <p class="card-text">
                                    <i class="fa-solid fa-bookmark"></i> <b>@Html.DisplayNameFor(model => model.Categoria):</b> @Html.DisplayFor(model => model.Categoria.nombre)
                                </p>
                                <p class="card-text fw-bold precio" style="color: #2596be; font-weight: 500;">
                                    $@Html.DisplayFor(model => model.Precio)
                                </p>
                            </div>
                            <hr class="te_s_hr_line bg-black" />

                            <div class="row">
                                <div class="logo-detail ">
                                    <img src="~/Content/Images/logo.png" />
                                </div>
                                <div class="col-md-10">
                                    <span class="slogan-detail mb-3" style="margin-bottom:5rem">
                                        Producimos y comercializamos la marca
                                        <b class="fw-bold">@Html.DisplayFor(model => model.Tienda.NombreProveedor)</b>
                                        para los productos de mayor producción agropecuaria, productos destinados para fincas y granjas donde se esperan rendimientos de mercado.
                                    </span>
                                    <button style="margin-top:1rem">

                                        @Html.ActionLink("Ver productos", "Index", "Home", null, new { @class = "button-productos" })
                                    </button>
                                </div>
                            </div>

                            <hr class="te_s_hr_line bg-black" />

                            <ul class="d-flex text-decoration-none custom-list">
                                <li><span class="material-symbols-outlined"> <span class="material-symbols-outlined">local_shipping</span> </span>Envíos a todo el país</li>
                                <li><span class="material-symbols-outlined">payments</span>Ver nuestra política de devoluciones</li>
                            </ul>


                            @*<div class="chat-container">
                                    <div class="chat-header">
                                        <h2>Chat de Preguntas y Respuestas</h2>
                                    </div>
                                    <div class="chat-body" id="chat-body">

                                        <div class="d-flex flex-row gap-5">
                                            @foreach (var chat in Model.ChatProducto)
                                            {
                                                foreach (var mensaje in chat.Mensaje)
                                                {

                                                    <h3>@Html.DisplayFor(o => mensaje.Usuario.Nombre)</h3>
                                                    <h3>@Html.DisplayFor(o => mensaje.Mensaje1)</h3>
                                                }
                                            }
                                        </div>
                                    </div>
                                    <div class="chat-input">

                                        <input type="text" id="user-input" placeholder="Escribe tu pregunta...">

                                        <input type="submit" value="Enviar" onclick="sendMessage()">

                                    </div>


                                </div>*@

                        </div>
                    </div>
                </div>

                @*<div id="chat-bubble">
                        <div id="chat-icon">
                            <span class="material-symbols-outlined">
                                chat
                            </span>
                            <div id="unread-count">0</div>
                        </div>
                        <div id="chat-window">
                            <div id="chat-messages"></div>
                            <input type="text" id="message-input" placeholder="Escribe tu mensaje...">
                            <button id="send-button">Enviar</button>
                        </div>
                    </div>*@
                <div id="chat-bubble">
                    <div id="chat-icon">
                        <!--<img src="chat-icon.png">-->
                        <span class="material-symbols-outlined">
                            chat
                        </span>
                        <div id="unread-count">0</div>
                    </div>
                    <div id="chat-window">
                        <label class="text-center">@Html.DisplayFor(model => model.Tienda.NombreProveedor)</label>

                        <div id="chat-messages">

                            <div class="d-flex flex-column gap-1 ">
                                @foreach (var chat in Model.ChatProducto)
                                {
                                    //Mensaje del cliente
                                    foreach (var mensaje in chat.Mensaje)
                                    {
                                        <div class="d-flex gap-2 message justify-content-end">
                                            <div class="d-flex flex-column sender">
                                                <h4>Tú</h4>
                                                <h4>@Html.DisplayFor(o => mensaje.Mensaje1)</h4>
                                            </div>
                                        </div>

                                    }

                                    //Respuesta de la tienda
                                    foreach (var mensaje in chat.Mensaje)
                                    {
                                      if (!string.IsNullOrEmpty(mensaje.Respuesta))
                                                {
                                        <div class="d-flex gap-2 message ">
                                            <div class="d-flex flex-column receiver">
                                                    <h4>Tienda</h4>
                                                    <h4>@Html.DisplayFor(o => mensaje.Respuesta)</h4>
                                                </div>
                                        </div>
                                      }
                                    }

                                }
                            </div>

                            @*<div class="d-flex gap-2 message sender">
                <div class="d-flex flex-column">
                    <h4>Maikel</h4>
                    <h4>JAJAJ</h4>
                </div>
            </div>*@

                        </div>
                        <div class="pb-2">
                            <input type="text" id="message-input" placeholder="Escribe tu mensaje...">
                            <button id="send-button">Enviar</button>
                        </div>
                    </div>
                </div>




            </div>
        </div>
    </div>


</div>

<script>

    /////////////////////////////


    let chatIcon = document.getElementById('chat-icon');
    let chatWindow = document.getElementById('chat-window');
    let messageInput = document.getElementById('message-input');
    let sendButton = document.getElementById('send-button');
    let unreadCount = document.getElementById('unread-count');

    let unreadMessages = 0;

    chatIcon.addEventListener('click', function (event) {
        event.stopPropagation(); // Evita que el clic en el icono cierre la ventana

        if (chatWindow.style.display === 'block') {
            chatWindow.style.display = 'none';
        } else {
            chatWindow.style.display = 'block';
            unreadMessages = 0;
            unreadCount.innerText = unreadMessages;
        }
    });

    document.addEventListener('click', function (event) {
        if (!chatWindow.contains(event.target) && event.target !== chatIcon) {
            chatWindow.style.display = 'none';
        }
    });


    sendButton.addEventListener('click', function () {
        let message = messageInput.value;
        if (message.trim() !== '') {
            let messageContainer = document.createElement('div');
            messageContainer.classList.add('d-flex', 'gap-2', 'message', 'justify-content-end');

            let messageContent = document.createElement('div');
            messageContent.classList.add('d-flex', 'flex-column', 'sender');

            let messageTitle = document.createElement('h4');
            messageTitle.innerText = 'Tú';

            let messageText = document.createElement('h4');
            messageText.innerText = message;

            messageContent.appendChild(messageTitle);
            messageContent.appendChild(messageText);
            messageContainer.appendChild(messageContent);

            document.getElementById('chat-messages').appendChild(messageContainer);
            messageInput.value = '';
            unreadMessages++;
            unreadCount.innerText = unreadMessages;
        }
    });



</script>
