
@model Infraestructure.Models.Producto

@{
    ViewBag.Title = "Details";
}

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div>
    <div class="content">
        <div class="row row-cols-2 g-3">
            <div class="col">
                <div class="card mb-3" style="max-width: auto;">
                    <div class="row g-0">
                        <div class="col-md-4">
                            <img src="data:image/jpeg;charset=utf-8;base64,@Convert.ToBase64String(Model.Imagen)"
                                 alt="Libro @Html.DisplayFor(model => model.Nombre)"
                                 class="img-fluid rounded-start" />
                        </div>
                        <div class="col-md-8">
                            <div class="card-body">
                                <span class="card-title" style="font-size: 25px; font-weight: 500; line-height: 1.2">@Html.DisplayFor(model => model.Nombre)</span>

                                <p class="card-text">
                                    <i class="fa-solid fa-box"> </i> <b>@Html.DisplayNameFor(model => model.Descripcion):</b>  @Html.DisplayFor(model => model.Descripcion)
                                </p>
                                <p class="card-text" style="color: #E45641; font-weight: 500;">
                                    @Html.DisplayFor(model => model.Precio)
                                </p>
                                <p class="card-text">
                                    <i class="fa-solid fa-box"> </i> <b>@Html.DisplayNameFor(model => model.Estado):</b>  @Html.DisplayFor(model => model.Estado)
                                </p>
                                <p class="card-text">
                                    <i class="fa-solid fa-circle-user"></i> <b>@Html.DisplayNameFor(model => model.Tienda):</b>    @Html.DisplayFor(model => model.Tienda.NombreProveedor)
                                </p>
                                <p class="card-text">
                                    <i class="fa-solid fa-bookmark"></i> <b>@Html.DisplayNameFor(model => model.Categoria):</b> @Html.DisplayFor(model => model.Categoria.nombre)

                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="accordion w-100" id="basicAccordion">

            @foreach (var item in Model.ChatProducto)
            {
                if (item==null)
                {
                    <h1>Vacio, nulo</h1>
                }
                else
                {
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingTwo">
                            <button class="accordion-button collapsed" type="button" data-mdb-toggle="collapse"
                                    data-mdb-target="#basicAccordionCollapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                               @Html.DisplayFor(x=> item.Mensaje)
                            </button>
                        </h2>
                        <div id="basicAccordionCollapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo"
                             data-mdb-parent="#basicAccordion" style="">
                            <div class="accordion-body">
                                <strong>This is the second item's accordion body.</strong> It is hidden by default,
                                until the collapse plugin adds the appropriate classes that we use to style each
                                element. These classes control the overall appearance, as well as the showing and
                                hiding via CSS transitions. You can modify any of this with custom CSS or overriding
                                our default variables. It's also worth noting that just about any HTML can go within
                                the <code>.accordion-body</code>, though the transition does limit overflow.
                            </div>
                        </div>
                    </div>
                }


            }

        </div>

    </div>

</div>
